{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\massi\\\\OneDrive\\\\Desktop\\\\Personal\\\\University\\\\IU\\\\1st year\\\\1st semester\\\\PROJECT SOFTWARE ENGINEERING\\\\Project code\\\\trackgoals-frontend\\\\src\\\\components\\\\common\\\\PrivateRoute.js\";\nimport { Navigate } from \"react-router-dom\";\n\n/**\r\n * PrivateRoute functional component.\r\n * This component acts as a guard for routes that require user authentication.\r\n * It checks if a user is logged in (by looking for an authentication token).\r\n * If the user is authenticated, it renders its children (the protected content).\r\n * Otherwise, it redirects the user to the login page.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The child components that PrivateRoute wraps.\r\n * These are the components that should only be accessible to logged-in users.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute({\n  children\n}) {\n  const token = localStorage.getItem(\"token\"); // Look for an existing token\n\n  if (!token) {\n    // If the token does not exist and then the user is not logged, redirect them to the login page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If User is logged in, the access is allowed and it renders its children (the protected content).\n  return children;\n}\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["Navigate","jsxDEV","_jsxDEV","PrivateRoute","children","token","localStorage","getItem","to","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/massi/OneDrive/Desktop/Personal/University/IU/1st year/1st semester/PROJECT SOFTWARE ENGINEERING/Project code/trackgoals-frontend/src/components/common/PrivateRoute.js"],"sourcesContent":["import { Navigate } from \"react-router-dom\";\r\n\r\n/**\r\n * PrivateRoute functional component.\r\n * This component acts as a guard for routes that require user authentication.\r\n * It checks if a user is logged in (by looking for an authentication token).\r\n * If the user is authenticated, it renders its children (the protected content).\r\n * Otherwise, it redirects the user to the login page.\r\n *\r\n * @param {object} props - The component's props.\r\n * @param {React.ReactNode} props.children - The child components that PrivateRoute wraps.\r\n * These are the components that should only be accessible to logged-in users.\r\n */\r\nfunction PrivateRoute({ children }) {\r\n  const token = localStorage.getItem(\"token\"); // Look for an existing token\r\n\r\n  if (!token) {\r\n    // If the token does not exist and then the user is not logged, redirect them to the login page\r\n    return <Navigate to=\"/login\" />;\r\n  }\r\n\r\n  // If User is logged in, the access is allowed and it renders its children (the protected content).\r\n  return children;\r\n}\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAAC,MAAA,IAAAC,OAAA;AAWA,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAClC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;;EAE7C,IAAI,CAACF,KAAK,EAAE;IACV;IACA,oBAAOH,OAAA,CAACF,QAAQ;MAACQ,EAAE,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACjC;;EAEA;EACA,OAAOR,QAAQ;AACjB;AAACS,EAAA,GAVQV,YAAY;AAYrB,eAAeA,YAAY;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}